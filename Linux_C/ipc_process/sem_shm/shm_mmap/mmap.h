//111111111111111111111111111111111111111111111111111111111111111111111111
//格式测试:
//邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵邵
//起始日期:
//完成日期:
//************************************************************************
//修改日志:

//, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,, , ,



//1.虚拟内存的正向说法:(实际没啥实用性, 请看2, 虚拟内存的弊端演说)
/*
	虚拟内存模块(类似于file, 但是是tmp 的file, 速度也可以
	实际是存放再swap 交换区中!!debian 安装的时候设置的交换区)

	共享内存的意义:
	用一小块缓冲区 + 磁盘, 组成一个混合冲刷但是又不太影响速度的数据模块.
	让系统帮你自动冲刷, 你只管写数据就是.

	虚拟内存的意义还是帮忙保存数据,数据泄洪,断电保护
	(磁盘有效, 固态硬盘无效)

	swapon -s 可以查看swap 区的大小, 但是一般很少人用.
	冲刷控制还是自己控制比较好.
*/



//2.虚拟内存的弊端演说
/*
https://www.zhihu.com/question/48161206
https://www.zhihu.com/question/48161206/answer/110418693

你的脑子是晕的, 被听到的信息搞晕了头脑, 我帮你洗一次脑吧：


1. 请放弃虚拟内存这个概念, 那个是广告性的概念, 在开发中没有意义.
	开发中只有虚拟空间的概念, 进程看到的所有地址组成的空间, 就是虚拟空间.
	虚拟空间是某个进程对分配给它的所有物理地址(已经分配的和将会分配的)的重新映射.

2. mmap的作用, 在应用这一层, 是让你把文件的某一段, 当作内存一样来访问.
	内核和驱动如何实现的, 性能高不高这些问题, 这层语义上没有承诺.
	你基于功能决定怎么用它就好了, 少胡思乱想.
	有了以上两个, 你就可以写好程序了.



下面介绍一下Linux的实现细节, 权当好玩, 
如果你搞不清楚前面两条, 后面的就不要看, 否则你又乱掉了.

3. mmap的工作原理, 当你发起这个调用的时候, 
	它只是在你的虚拟空间中分配了一段空间, 连真实的物理地址都不会分配的,
	当你访问这段空间, CPU陷入OS内核执行异常处理,
	然后异常处理会在这个时间分配物理内存, 并用文件的内容填充这片内存,
	然后才返回你进程的上下文, 这时你的程序才会感知到这片内存里有数据

4. 驱动每次读入多少页面, 页面的分配算法等等, 
	都不是系统的承诺, 不能作为你编程的依赖.
	这就是前面说的：不要胡思乱想

5. 至于swap分区的作用, 
	参考这里：Linux 是怎样使用内存的？
	我们接着来解释一下为什么我建议你放弃虚拟内存而使用虚拟空间的概念

https://www.zhihu.com/question/20590149/answer/38397272


 */
