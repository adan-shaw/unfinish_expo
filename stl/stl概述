数据结构c++ 语言描述 -- 应用标准模板库

1.线性容器: 

1.1：线性连续容器
	(基于deque)
	栈-stack, 优先队列-priority queue, 队列-queue, 双向队列-deque	

	(不基于deque)
	向量-vector, 数组-array



1.2: 线性非连续容器
	列表-list





2.关联容器:

2.1: 基于红黑树
	<反正现在树结构以红黑树为比较先进的设计,
	 反正二叉树型的数据结构基本都是红黑树,
	 其目的都是为了保证不会生成退化树, 增强聚合操作的性能.>

集合-set, 地图-map, 多重集合-multi set, 多重地图-multi map.
(注:多重集合/地图即是, 允许出现重复值. 
		一般set/map 不允许出现重复值, 
		如果出现重复值insert 会直接覆盖, 但不会报错)

红黑树容器的使用关键是各种聚合函数的熟练程度.



2.2: 基于哈希
	<基于hash 的set/map 在查找, 增删操作等简单操作上有优势, 
	 但是不适合做聚合操作, 比如你要经常统计集合里面的数据, 
	 大于10的有多少个, 少于10的有多少个,
	 这个聚合操作必然会遍历hash, 这样性能超级低, hash不擅长做这个>

哈希集合-unordered_set
哈希地图-unordered_map
多重哈希集合-unordered_multiset
多重哈希地图-unordered_multimap

哈希容器的使用关键是调整: 哈希策略. 也就是修改哈希函数.



3.迭代器:
	迭代器也是一个类, 但是这个类里面有指针, 指向目标容器的元素地址.
	迭代器的实现方法实际上是重载++,-- 等移动符号, = 号等赋值符号, 
	类似地, 你不能直接it+=10; 这样并不能表示你向后移动了10 个元素.
	如果是支持下标访问的连续元素容器, 这样做还行, 不是连续容器会失效的.

	迭代器默认使用中序遍历set/map 容器中的红黑树, 即从小到大遍历.





4.其他数据结构:

4.1: 堆
	什么是堆?? 其实堆也是一种树结构!! 
	而且肯定也是红黑树, 因为红黑树是比较先进的树结构.
	但是有一点不同的是, set/map 是不连续的红黑树, 
	所以在<维护队列序列开销上会比较少>.
	但是<堆>是一种基于<数组>or <向量> 上面的连续红黑树, 
	所以在<维护队列序列开销上会比较大>
	
	这意味这进程堆的new,delete 操作性能消耗是很客观的, 
	所以才会有ptmalloc, tcmalloc, jemalloc 等内存块复用机制.
	你不需要想太多ptmalloc 的具体实现细节, 你知道具体有这么一回事就行.



4.2: 图
什么是图?? 其实图就是一种多向树, 不规则树, 图会涉及几个概念:
1.顶点
2.边
3.方向

关于顶点: 
	只有1 个顶点的图, 是没有边的.
	2 个顶点的图, 可以有0-1 条边,
	3 个顶点的图, 可以有0-3 条边, 
	也就是顶点的数量, 决定了图的边的max 数量!!

关于方向: 
	由<有方向的边>组成的图, 称之为有向图.
	由<无方向的边>组成的图, 称之为无向图.
	边的方向只是图的一种行为表现, 是一个类似附加的条件,
	并不影响边与顶点的规律与关系






